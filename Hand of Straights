import java.util.*;

class Solution {
    public boolean isNStraightHand(int[] hand, int groupSize) {
        if (hand.length % groupSize != 0)
            return false;

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int val : hand) {
            pq.add(val);
        }

        while (!pq.isEmpty()) {
            int smallest = pq.poll();
            for (int i = 1; i < groupSize; i++) {
                if (pq.remove(smallest + i)) continue;
                else return false;
            }
        }
        return true;
    }

    // Main method to test
    public static void main(String[] args) {
        Solution sol = new Solution();

        int[] hand1 = {1,2,3,6,2,3,4,7,8};
        int groupSize1 = 3;
        System.out.println(sol.isNStraightHand(hand1, groupSize1)); 
        // Expected: true  (can form [1,2,3], [2,3,4], [6,7,8])

        int[] hand2 = {1,2,3,4,5};
        int groupSize2 = 4;
        System.out.println(sol.isNStraightHand(hand2, groupSize2)); 
        // Expected: false (5 cards cannot form groups of 4)

        int[] hand3 = {1,2,2,3};
        int groupSize3 = 3;
        System.out.println(sol.isNStraightHand(hand3, groupSize3)); 
        // Expected: false
    }
}
